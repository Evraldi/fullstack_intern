name: Endpoints
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/v1/register
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Register new user.'
      description: 'This endpoint registers a new user and sends an email verification notification.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The full name of the user.'
        required: true
        example: 'John Doe'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'The unique email address of the user.'
        required: true
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'The password for the user account. Must be at least 8 characters.'
        required: true
        example: secret123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Must match the password field.'
        required: true
        example: secret123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'John Doe'
      email: john@example.com
      password: secret123
      password_confirmation: secret123
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "message": "Registration successful! Please check your email for verification.",
            "data": {
              "user": {
                "id": 1,
                "name": "John Doe",
                "email": "john@example.com",
                "role": "viewer",
                "created_at": "2024-02-19T10:00:00.000000Z",
                "updated_at": "2024-02-19T10:00:00.000000Z"
              }
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "The given data was invalid.",
            "errors": {
              "email": [
                "The email has already been taken."
              ]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/login
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Login user and create API token.'
      description: |-
        This endpoint authenticates a user using their email and password.
        Upon successful authentication and email verification, it returns an API token.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The email address of the user.'
        required: true
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'The password for the account.'
        required: true
        example: secret123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: john@example.com
      password: secret123
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Login successful",
            "data": {
              "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
              "user": {
                "id": 1,
                "name": "John Doe",
                "email": "john@example.com",
                "role": "viewer",
                "email_verified_at": "2024-02-19T10:00:00.000000Z",
                "created_at": "2024-02-19T10:00:00.000000Z",
                "updated_at": "2024-02-19T10:00:00.000000Z"
              }
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Invalid credentials"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Email not verified"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/forgot-password
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Send a password reset link to the given email.'
      description: |-
        This endpoint sends a password reset link to the provided email address if it exists in the system.
        The email field is required and must be in a valid email format.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The email address of the user requesting a password reset.'
        required: true
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: john@example.com
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "We have emailed your password reset link!"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "Unable to send reset link."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "The given data was invalid.",
            "errors": {
              "email": [
                "The email field is required."
              ]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/reset-password
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Reset password using provided token.'
      description: |-
        This endpoint resets the user's password using the token provided in the password reset email.
        The request must include a valid reset token, the email associated with the account, and the new password (with confirmation).
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      token:
        name: token
        description: 'The password reset token that was emailed to the user.'
        required: true
        example: '"abc123def456"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'The email address of the user.'
        required: true
        example: '"john@example.com"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'The new password for the account. Must be at least 8 characters.'
        required: true
        example: '"newsecret123"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Must match the password field.'
        required: true
        example: '"newsecret123"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      token: '"abc123def456"'
      email: '"john@example.com"'
      password: '"newsecret123"'
      password_confirmation: '"newsecret123"'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Your password has been reset!"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "Password reset failed."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "The given data was invalid.",
            "errors": {
              "email": [
                "The email field is required."
              ],
              "password": [
                "The password must be at least 8 characters."
              ]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/email/verify/{id}/{hash}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Verify email using link parameters.'
      description: |-
        This endpoint verifies a user's email address when they click the verification link
        that was sent to them. The link contains two parameters: the user's ID and a verification hash.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The unique identifier of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      hash:
        name: hash
        description: "The verification hash generated from the user's email."
        required: true
        example: '"2b1a7d9e..."'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
      hash: '"2b1a7d9e..."'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Email successfully verified"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
            "message": "Email already verified"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Invalid verification link"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "User not found"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/logout
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Logout user by deleting current access token.'
      description: |-
        This endpoint logs out the currently authenticated user by revoking their current access token.
        A valid Bearer token in the Authorization header is required.
      authenticated: false
      custom: []
    headers:
      Authorization: 'Bearer {token} required The access token of the authenticated user.'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Successfully logged out"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/email/resend
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Resend verification email to the authenticated user.'
      description: |-
        This endpoint resends the email verification link to the currently authenticated user.
        A valid Bearer token in the Authorization header is required.
      authenticated: false
      custom: []
    headers:
      Authorization: 'Bearer {token} required The API token for the authenticated user.'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Verification link resent"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/books
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Display a paginated listing of books.'
      description: |-
        This endpoint retrieves a paginated list of books with optional filtering and sorting.
        You can filter the books by a search keyword (applied to title, author, or description)
        and by publication year (tahun_terbit). You can also specify the sort order and number of items per page.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      search:
        name: search
        description: 'Optional. A keyword to filter books by title, author, or description.'
        required: false
        example: '"Laravel"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      tahun_terbit:
        name: tahun_terbit
        description: 'Optional. Filter books by publication year.'
        required: false
        example: 2020
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      order:
        name: order
        description: 'Optional. The sort order for the book title. Allowed values: "asc", "desc". Default: "asc"'
        required: false
        example: et
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      per_page:
        name: per_page
        description: 'Optional. The number of items per page. Must be an integer >= 1. Default: 10'
        required: false
        example: 6
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanQueryParameters:
      search: '"Laravel"'
      tahun_terbit: 2020
      order: et
      per_page: 6
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Books retrieved successfully",
            "data": [
              {
                "id": 1,
                "judul": "Laravel Basics",
                "penulis": "Jane Doe",
                "tahun_terbit": 2020,
                "deskripsi": "An introduction to Laravel.",
                "created_at": "2024-02-19T10:00:00.000000Z",
                "updated_at": "2024-02-19T10:00:00.000000Z"
              }
            ],
            "meta": {
              "current_page": 1,
              "per_page": 10,
              "total": 100,
              "last_page": 10
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "No books found",
            "data": [],
            "meta": {
              "current_page": 1,
              "per_page": 10,
              "total": 0,
              "last_page": 0
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "success": false,
            "message": "Validation error",
            "errors": {
              "per_page": [
                "The per_page must be at least 1."
              ]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "success": false,
            "message": "Failed to retrieve books",
            "errors": {
              "server": "An unexpected error occurred."
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/books
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new book record.'
      description: 'This endpoint creates a new book after validating the input and checking user authorization.'
      authenticated: false
      custom: []
    headers:
      Authorization: 'Bearer {token} required The access token of the authenticated user.'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      judul:
        name: judul
        description: 'The title of the book.'
        required: true
        example: '"Laravel Essentials"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      penulis:
        name: penulis
        description: 'The author of the book.'
        required: true
        example: '"John Doe"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      tahun_terbit:
        name: tahun_terbit
        description: 'The publication year. Must be between 1900 and {current year + 1}.'
        required: true
        example: 2023
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      deskripsi:
        name: deskripsi
        description: 'The description of the book.'
        required: true
        example: '"An introductory guide to Laravel."'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      judul: '"Laravel Essentials"'
      penulis: '"John Doe"'
      tahun_terbit: 2023
      deskripsi: '"An introductory guide to Laravel."'
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "success": true,
            "message": "Book added successfully",
            "data": {
              "id": 1,
              "judul": "Laravel Essentials",
              "penulis": "John Doe",
              "tahun_terbit": 2023,
              "deskripsi": "An introductory guide to Laravel.",
              "created_at": "2024-02-19T12:34:56.000000Z",
              "updated_at": "2024-02-19T12:34:56.000000Z"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "success": false,
            "message": "Unauthorized action",
            "errors": {
              "authorization": ["This action is unauthorized."]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "success": false,
            "message": "Validation error",
            "errors": {
              "judul": ["The judul field is required."]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "success": false,
            "message": "Failed to create book",
            "errors": {
              "server": ["An unexpected error occurred."]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/books/{id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Display the specified book.'
      description: |-
        This endpoint retrieves the details of a specific book identified by its ID.
        It returns a detailed error message if the book is not found or if the user is unauthorized.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the book to be retrieved.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Book details retrieved successfully",
            "data": {
              "id": 1,
              "judul": "Laravel Essentials",
              "penulis": "John Doe",
              "tahun_terbit": 2023,
              "deskripsi": "An introductory guide to Laravel.",
              "created_at": "2024-02-19T12:34:56.000000Z",
              "updated_at": "2024-02-19T12:34:56.000000Z"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "success": false,
            "message": "Book not found",
            "errors": {
              "book": "The book with the specified ID does not exist."
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "success": false,
            "message": "An unexpected error occurred.",
            "errors": {
              "server": "Something went wrong. Please try again later."
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/v1/books/{id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update the specified book record.'
      description: |-
        This endpoint updates the details of a book identified by its ID.
        All fields are optional; only the provided fields will be updated.
        The authenticated user must be authorized to perform this action.
      authenticated: false
      custom: []
    headers:
      Authorization: 'Bearer {token} required The access token of the authenticated user.'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the book to be updated.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      judul:
        name: judul
        description: 'Optional. The title of the book.'
        required: false
        example: '"Laravel Advanced Concepts".'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      penulis:
        name: penulis
        description: 'Optional. The author of the book.'
        required: false
        example: '"Jane Doe".'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      tahun_terbit:
        name: tahun_terbit
        description: 'Optional. The publication year, must be between 1900 and {current year + 1}.'
        required: false
        example: 2023
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      deskripsi:
        name: deskripsi
        description: 'Optional. The description of the book.'
        required: false
        example: '"An advanced guide to Laravel."'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      judul: '"Laravel Advanced Concepts".'
      penulis: '"Jane Doe".'
      tahun_terbit: 2023
      deskripsi: '"An advanced guide to Laravel."'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          (OK) {
            "success": true,
            "message": "Book updated successfully",
            "data": {
              "id": 1,
              "judul": "Laravel Advanced Concepts",
              "penulis": "Jane Doe",
              "tahun_terbit": 2023,
              "deskripsi": "An advanced guide to Laravel.",
              "created_at": "2024-02-19T12:34:56.000000Z",
              "updated_at": "2024-02-19T13:00:00.000000Z"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          (Forbidden) {
            "success": false,
            "message": "Unauthorized action",
            "errors": {
              "authorization": "This action is unauthorized."
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          (Not Found) {
            "success": false,
            "message": "Book not found",
            "errors": {
              "book": "The book with the specified ID does not exist."
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          (Unprocessable Entity) {
            "success": false,
            "message": "Validation error",
            "errors": {
              "judul": [
                "The judul field must be a string."
              ],
              "tahun_terbit": [
                "The tahun_terbit must be at least 1900."
              ]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          (Internal Server Error) {
            "success": false,
            "message": "Failed to update book",
            "errors": {
              "server": "An unexpected error occurred."
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/books/{id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Remove the specified book from storage.'
      description: |-
        This endpoint deletes a book identified by its ID.
        The authenticated user must be authorized to perform this action.
      authenticated: false
      custom: []
    headers:
      Authorization: 'Bearer {token} required The access token of the authenticated user.'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the book to be deleted.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          (OK) {
            "success": true,
            "message": "Book deleted successfully"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          (Forbidden) {
            "success": false,
            "message": "Unauthorized action",
            "errors": {
              "authorization": "This action is unauthorized."
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          (Not Found) {
            "success": false,
            "message": "Book not found",
            "errors": {
              "book": "The book with the specified ID does not exist."
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          (Internal Server Error) {
            "success": false,
            "message": "Failed to delete book",
            "errors": {
              "server": "An unexpected error occurred."
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/tokens
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/tokens
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/tokens/{id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the token.'
        required: true
        example: nobis
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: nobis
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: api/v1/tokens
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/users
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Display a paginated listing of users.'
      description: |-
        This endpoint retrieves a paginated list of users. The response includes user details such as id, name, email, role, and email verification status.
        The request must be authenticated and authorized.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      page:
        name: page
        description: 'Optional. The page number for pagination.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      page: 1
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          (OK) {
            "success": true,
            "message": "Users retrieved successfully",
            "data": [
              {
                "id": 1,
                "name": "John Doe",
                "email": "john@example.com",
                "role": "admin",
                "email_verified_at": "2024-02-19T12:34:56.000000Z"
              },
              {
                "id": 2,
                "name": "Jane Smith",
                "email": "jane@example.com",
                "role": "editor",
                "email_verified_at": "2024-02-19T12:35:00.000000Z"
              }
            ],
            "meta": {
                "current_page": 1,
                "per_page": 10,
                "total": 100,
                "last_page": 10
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          (OK) {
            "success": true,
            "message": "No users found",
            "data": [],
            "meta": {
                "current_page": 1,
                "per_page": 10,
                "total": 0,
                "last_page": 0
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          (Forbidden) {
            "success": false,
            "message": "Unauthorized access",
            "errors": {
              "authorization": ["Error message describing unauthorized access."]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          (Internal Server Error) {
            "success": false,
            "message": "Failed to retrieve users",
            "errors": {
              "server": ["An unexpected error occurred."]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/v1/users/{id}/role'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update the role of the specified user.'
      description: |-
        This endpoint updates the role of a user identified by its ID. The authenticated user is not allowed to update their own role.
        The new role must be one of the following: "admin", "editor", or "viewer".
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user whose role will be updated.'
        required: true
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      role:
        name: role
        description: 'The new role for the user. Allowed values: admin, editor, viewer.'
        required: true
        example: '"editor".'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      role: '"editor".'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          (OK) {
            "success": true,
            "message": "Role updated successfully",
            "updated_user": {
              "id": 3,
              "name": "John Doe",
              "email": "john@example.com",
              "role": "editor"
            },
            "metadata": {
              "updated_at": "2024-02-19T13:00:00.000000Z",
              "changed_by": {
                "id": 1,
                "name": "Admin User"
              }
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          (Forbidden) {
            "success": false,
            "message": "Unauthorized action",
            "errors": {
              "authorization": ["Tidak boleh mengubah role sendiri"]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          (Not Found) {
            "success": false,
            "message": "User not found",
            "errors": {
              "id": ["User tidak ditemukan"]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          (Internal Server Error) {
            "success": false,
            "message": "Failed to update role",
            "errors": {
              "server": ["An unexpected error occurred"]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
