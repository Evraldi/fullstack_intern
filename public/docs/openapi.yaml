openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /api/v1/register:
    post:
      summary: 'Register new user.'
      operationId: registerNewUser
      description: 'This endpoint registers a new user and sends an email verification notification.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Registration successful! Please check your email for verification.'
                  data:
                    user:
                      id: 1
                      name: 'John Doe'
                      email: john@example.com
                      role: viewer
                      created_at: '2024-02-19T10:00:00.000000Z'
                      updated_at: '2024-02-19T10:00:00.000000Z'
                properties:
                  message:
                    type: string
                    example: 'Registration successful! Please check your email for verification.'
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: 'John Doe'
                          email:
                            type: string
                            example: john@example.com
                          role:
                            type: string
                            example: viewer
                          created_at:
                            type: string
                            example: '2024-02-19T10:00:00.000000Z'
                          updated_at:
                            type: string
                            example: '2024-02-19T10:00:00.000000Z'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The given data was invalid.'
                  errors:
                    email:
                      - 'The email has already been taken.'
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        example:
                          - 'The email has already been taken.'
                        items:
                          type: string
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The full name of the user.'
                  example: 'John Doe'
                  nullable: false
                email:
                  type: string
                  description: 'The unique email address of the user.'
                  example: john@example.com
                  nullable: false
                password:
                  type: string
                  description: 'The password for the user account. Must be at least 8 characters.'
                  example: secret123
                  nullable: false
                password_confirmation:
                  type: string
                  description: 'Must match the password field.'
                  example: secret123
                  nullable: false
              required:
                - name
                - email
                - password
                - password_confirmation
      security: []
  /api/v1/login:
    post:
      summary: 'Login user and create API token.'
      operationId: loginUserAndCreateAPIToken
      description: "This endpoint authenticates a user using their email and password.\nUpon successful authentication and email verification, it returns an API token."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Login successful'
                  data:
                    token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                    user:
                      id: 1
                      name: 'John Doe'
                      email: john@example.com
                      role: viewer
                      email_verified_at: '2024-02-19T10:00:00.000000Z'
                      created_at: '2024-02-19T10:00:00.000000Z'
                      updated_at: '2024-02-19T10:00:00.000000Z'
                properties:
                  message:
                    type: string
                    example: 'Login successful'
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: 'John Doe'
                          email:
                            type: string
                            example: john@example.com
                          role:
                            type: string
                            example: viewer
                          email_verified_at:
                            type: string
                            example: '2024-02-19T10:00:00.000000Z'
                          created_at:
                            type: string
                            example: '2024-02-19T10:00:00.000000Z'
                          updated_at:
                            type: string
                            example: '2024-02-19T10:00:00.000000Z'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid credentials'
                properties:
                  message:
                    type: string
                    example: 'Invalid credentials'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Email not verified'
                properties:
                  message:
                    type: string
                    example: 'Email not verified'
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The email address of the user.'
                  example: john@example.com
                  nullable: false
                password:
                  type: string
                  description: 'The password for the account.'
                  example: secret123
                  nullable: false
              required:
                - email
                - password
      security: []
  /api/v1/forgot-password:
    post:
      summary: 'Send a password reset link to the given email.'
      operationId: sendAPasswordResetLinkToTheGivenEmail
      description: "This endpoint sends a password reset link to the provided email address if it exists in the system.\nThe email field is required and must be in a valid email format."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'We have emailed your password reset link!'
                properties:
                  message:
                    type: string
                    example: 'We have emailed your password reset link!'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Unable to send reset link.'
                properties:
                  message:
                    type: string
                    example: 'Unable to send reset link.'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The given data was invalid.'
                  errors:
                    email:
                      - 'The email field is required.'
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        example:
                          - 'The email field is required.'
                        items:
                          type: string
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The email address of the user requesting a password reset.'
                  example: john@example.com
                  nullable: false
              required:
                - email
      security: []
  /api/v1/reset-password:
    post:
      summary: 'Reset password using provided token.'
      operationId: resetPasswordUsingProvidedToken
      description: "This endpoint resets the user's password using the token provided in the password reset email.\nThe request must include a valid reset token, the email associated with the account, and the new password (with confirmation)."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Your password has been reset!'
                properties:
                  message:
                    type: string
                    example: 'Your password has been reset!'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Password reset failed.'
                properties:
                  message:
                    type: string
                    example: 'Password reset failed.'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The given data was invalid.'
                  errors:
                    email:
                      - 'The email field is required.'
                    password:
                      - 'The password must be at least 8 characters.'
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        example:
                          - 'The email field is required.'
                        items:
                          type: string
                      password:
                        type: array
                        example:
                          - 'The password must be at least 8 characters.'
                        items:
                          type: string
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'The password reset token that was emailed to the user.'
                  example: '"abc123def456"'
                  nullable: false
                email:
                  type: string
                  description: 'The email address of the user.'
                  example: '"john@example.com"'
                  nullable: false
                password:
                  type: string
                  description: 'The new password for the account. Must be at least 8 characters.'
                  example: '"newsecret123"'
                  nullable: false
                password_confirmation:
                  type: string
                  description: 'Must match the password field.'
                  example: '"newsecret123"'
                  nullable: false
              required:
                - token
                - email
                - password
                - password_confirmation
      security: []
  '/api/v1/email/verify/{id}/{hash}':
    get:
      summary: 'Verify email using link parameters.'
      operationId: verifyEmailUsingLinkParameters
      description: "This endpoint verifies a user's email address when they click the verification link\nthat was sent to them. The link contains two parameters: the user's ID and a verification hash."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      message: 'Email successfully verified'
                    properties:
                      message:
                        type: string
                        example: 'Email successfully verified'
                  -
                    description: ''
                    type: object
                    example:
                      message: 'Email already verified'
                    properties:
                      message:
                        type: string
                        example: 'Email already verified'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid verification link'
                properties:
                  message:
                    type: string
                    example: 'Invalid verification link'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'User not found'
                properties:
                  message:
                    type: string
                    example: 'User not found'
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The unique identifier of the user.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: hash
        description: "The verification hash generated from the user's email."
        example: '"2b1a7d9e..."'
        required: true
        schema:
          type: string
  /api/v1/logout:
    post:
      summary: 'Logout user by deleting current access token.'
      operationId: logoutUserByDeletingCurrentAccessToken
      description: "This endpoint logs out the currently authenticated user by revoking their current access token.\nA valid Bearer token in the Authorization header is required."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Successfully logged out'
                properties:
                  message:
                    type: string
                    example: 'Successfully logged out'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
      tags:
        - Endpoints
      security: []
  /api/v1/email/resend:
    post:
      summary: 'Resend verification email to the authenticated user.'
      operationId: resendVerificationEmailToTheAuthenticatedUser
      description: "This endpoint resends the email verification link to the currently authenticated user.\nA valid Bearer token in the Authorization header is required."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Verification link resent'
                properties:
                  message:
                    type: string
                    example: 'Verification link resent'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
      tags:
        - Endpoints
      security: []
  /api/v1/books:
    get:
      summary: 'Display a paginated listing of books.'
      operationId: displayAPaginatedListingOfBooks
      description: "This endpoint retrieves a paginated list of books with optional filtering and sorting.\nYou can filter the books by a search keyword (applied to title, author, or description)\nand by publication year (tahun_terbit). You can also specify the sort order and number of items per page."
      parameters:
        -
          in: query
          name: search
          description: 'Optional. A keyword to filter books by title, author, or description.'
          example: '"Laravel"'
          required: false
          schema:
            type: string
            description: 'Optional. A keyword to filter books by title, author, or description.'
            example: '"Laravel"'
            nullable: false
        -
          in: query
          name: tahun_terbit
          description: 'Optional. Filter books by publication year.'
          example: 2020
          required: false
          schema:
            type: integer
            description: 'Optional. Filter books by publication year.'
            example: 2020
            nullable: false
        -
          in: query
          name: order
          description: 'Optional. The sort order for the book title. Allowed values: "asc", "desc". Default: "asc"'
          example: et
          required: false
          schema:
            type: string
            description: 'Optional. The sort order for the book title. Allowed values: "asc", "desc". Default: "asc"'
            example: et
            nullable: false
        -
          in: query
          name: per_page
          description: 'Optional. The number of items per page. Must be an integer >= 1. Default: 10'
          example: 6
          required: false
          schema:
            type: integer
            description: 'Optional. The number of items per page. Must be an integer >= 1. Default: 10'
            example: 6
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      success: true
                      message: 'Books retrieved successfully'
                      data:
                        -
                          id: 1
                          judul: 'Laravel Basics'
                          penulis: 'Jane Doe'
                          tahun_terbit: 2020
                          deskripsi: 'An introduction to Laravel.'
                          created_at: '2024-02-19T10:00:00.000000Z'
                          updated_at: '2024-02-19T10:00:00.000000Z'
                      meta:
                        current_page: 1
                        per_page: 10
                        total: 100
                        last_page: 10
                    properties:
                      success:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: 'Books retrieved successfully'
                      data:
                        type: array
                        example:
                          -
                            id: 1
                            judul: 'Laravel Basics'
                            penulis: 'Jane Doe'
                            tahun_terbit: 2020
                            deskripsi: 'An introduction to Laravel.'
                            created_at: '2024-02-19T10:00:00.000000Z'
                            updated_at: '2024-02-19T10:00:00.000000Z'
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            judul:
                              type: string
                              example: 'Laravel Basics'
                            penulis:
                              type: string
                              example: 'Jane Doe'
                            tahun_terbit:
                              type: integer
                              example: 2020
                            deskripsi:
                              type: string
                              example: 'An introduction to Laravel.'
                            created_at:
                              type: string
                              example: '2024-02-19T10:00:00.000000Z'
                            updated_at:
                              type: string
                              example: '2024-02-19T10:00:00.000000Z'
                      meta:
                        type: object
                        properties:
                          current_page:
                            type: integer
                            example: 1
                          per_page:
                            type: integer
                            example: 10
                          total:
                            type: integer
                            example: 100
                          last_page:
                            type: integer
                            example: 10
                  -
                    description: ''
                    type: object
                    example:
                      success: true
                      message: 'No books found'
                      data: []
                      meta:
                        current_page: 1
                        per_page: 10
                        total: 0
                        last_page: 0
                    properties:
                      success:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: 'No books found'
                      data:
                        type: array
                        example: []
                      meta:
                        type: object
                        properties:
                          current_page:
                            type: integer
                            example: 1
                          per_page:
                            type: integer
                            example: 10
                          total:
                            type: integer
                            example: 0
                          last_page:
                            type: integer
                            example: 0
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: 'Validation error'
                  errors:
                    per_page:
                      - 'The per_page must be at least 1.'
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      per_page:
                        type: array
                        example:
                          - 'The per_page must be at least 1.'
                        items:
                          type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: 'Failed to retrieve books'
                  errors:
                    server: 'An unexpected error occurred.'
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Failed to retrieve books'
                  errors:
                    type: object
                    properties:
                      server:
                        type: string
                        example: 'An unexpected error occurred.'
      tags:
        - Endpoints
      security: []
    post:
      summary: 'Create a new book record.'
      operationId: createANewBookRecord
      description: 'This endpoint creates a new book after validating the input and checking user authorization.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: true
                  message: 'Book added successfully'
                  data:
                    id: 1
                    judul: 'Laravel Essentials'
                    penulis: 'John Doe'
                    tahun_terbit: 2023
                    deskripsi: 'An introductory guide to Laravel.'
                    created_at: '2024-02-19T12:34:56.000000Z'
                    updated_at: '2024-02-19T12:34:56.000000Z'
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Book added successfully'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      judul:
                        type: string
                        example: 'Laravel Essentials'
                      penulis:
                        type: string
                        example: 'John Doe'
                      tahun_terbit:
                        type: integer
                        example: 2023
                      deskripsi:
                        type: string
                        example: 'An introductory guide to Laravel.'
                      created_at:
                        type: string
                        example: '2024-02-19T12:34:56.000000Z'
                      updated_at:
                        type: string
                        example: '2024-02-19T12:34:56.000000Z'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: 'Unauthorized action'
                  errors:
                    authorization:
                      - 'This action is unauthorized.'
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Unauthorized action'
                  errors:
                    type: object
                    properties:
                      authorization:
                        type: array
                        example:
                          - 'This action is unauthorized.'
                        items:
                          type: string
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: 'Validation error'
                  errors:
                    judul:
                      - 'The judul field is required.'
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      judul:
                        type: array
                        example:
                          - 'The judul field is required.'
                        items:
                          type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: 'Failed to create book'
                  errors:
                    server:
                      - 'An unexpected error occurred.'
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Failed to create book'
                  errors:
                    type: object
                    properties:
                      server:
                        type: array
                        example:
                          - 'An unexpected error occurred.'
                        items:
                          type: string
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                judul:
                  type: string
                  description: 'The title of the book.'
                  example: '"Laravel Essentials"'
                  nullable: false
                penulis:
                  type: string
                  description: 'The author of the book.'
                  example: '"John Doe"'
                  nullable: false
                tahun_terbit:
                  type: integer
                  description: 'The publication year. Must be between 1900 and {current year + 1}.'
                  example: 2023
                  nullable: false
                deskripsi:
                  type: string
                  description: 'The description of the book.'
                  example: '"An introductory guide to Laravel."'
                  nullable: false
              required:
                - judul
                - penulis
                - tahun_terbit
                - deskripsi
      security: []
  '/api/v1/books/{id}':
    get:
      summary: 'Display the specified book.'
      operationId: displayTheSpecifiedBook
      description: "This endpoint retrieves the details of a specific book identified by its ID.\nIt returns a detailed error message if the book is not found or if the user is unauthorized."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: true
                  message: 'Book details retrieved successfully'
                  data:
                    id: 1
                    judul: 'Laravel Essentials'
                    penulis: 'John Doe'
                    tahun_terbit: 2023
                    deskripsi: 'An introductory guide to Laravel.'
                    created_at: '2024-02-19T12:34:56.000000Z'
                    updated_at: '2024-02-19T12:34:56.000000Z'
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Book details retrieved successfully'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      judul:
                        type: string
                        example: 'Laravel Essentials'
                      penulis:
                        type: string
                        example: 'John Doe'
                      tahun_terbit:
                        type: integer
                        example: 2023
                      deskripsi:
                        type: string
                        example: 'An introductory guide to Laravel.'
                      created_at:
                        type: string
                        example: '2024-02-19T12:34:56.000000Z'
                      updated_at:
                        type: string
                        example: '2024-02-19T12:34:56.000000Z'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: 'Book not found'
                  errors:
                    book: 'The book with the specified ID does not exist.'
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Book not found'
                  errors:
                    type: object
                    properties:
                      book:
                        type: string
                        example: 'The book with the specified ID does not exist.'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: 'An unexpected error occurred.'
                  errors:
                    server: 'Something went wrong. Please try again later.'
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'An unexpected error occurred.'
                  errors:
                    type: object
                    properties:
                      server:
                        type: string
                        example: 'Something went wrong. Please try again later.'
      tags:
        - Endpoints
      security: []
    put:
      summary: 'Update the specified book record.'
      operationId: updateTheSpecifiedBookRecord
      description: "This endpoint updates the details of a book identified by its ID.\nAll fields are optional; only the provided fields will be updated.\nThe authenticated user must be authorized to perform this action."
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "(OK) {\n  \"success\": true,\n  \"message\": \"Book updated successfully\",\n  \"data\": {\n    \"id\": 1,\n    \"judul\": \"Laravel Advanced Concepts\",\n    \"penulis\": \"Jane Doe\",\n    \"tahun_terbit\": 2023,\n    \"deskripsi\": \"An advanced guide to Laravel.\",\n    \"created_at\": \"2024-02-19T12:34:56.000000Z\",\n    \"updated_at\": \"2024-02-19T13:00:00.000000Z\"\n  }\n}"
        403:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "(Forbidden) {\n  \"success\": false,\n  \"message\": \"Unauthorized action\",\n  \"errors\": {\n    \"authorization\": \"This action is unauthorized.\"\n  }\n}"
        404:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "(Not Found) {\n  \"success\": false,\n  \"message\": \"Book not found\",\n  \"errors\": {\n    \"book\": \"The book with the specified ID does not exist.\"\n  }\n}"
        422:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "(Unprocessable Entity) {\n  \"success\": false,\n  \"message\": \"Validation error\",\n  \"errors\": {\n    \"judul\": [\n      \"The judul field must be a string.\"\n    ],\n    \"tahun_terbit\": [\n      \"The tahun_terbit must be at least 1900.\"\n    ]\n  }\n}"
        500:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "(Internal Server Error) {\n  \"success\": false,\n  \"message\": \"Failed to update book\",\n  \"errors\": {\n    \"server\": \"An unexpected error occurred.\"\n  }\n}"
      tags:
        - Endpoints
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                judul:
                  type: string
                  description: 'Optional. The title of the book.'
                  example: '"Laravel Advanced Concepts".'
                  nullable: false
                penulis:
                  type: string
                  description: 'Optional. The author of the book.'
                  example: '"Jane Doe".'
                  nullable: false
                tahun_terbit:
                  type: integer
                  description: 'Optional. The publication year, must be between 1900 and {current year + 1}.'
                  example: 2023
                  nullable: false
                deskripsi:
                  type: string
                  description: 'Optional. The description of the book.'
                  example: '"An advanced guide to Laravel."'
                  nullable: false
      security: []
    delete:
      summary: 'Remove the specified book from storage.'
      operationId: removeTheSpecifiedBookFromStorage
      description: "This endpoint deletes a book identified by its ID.\nThe authenticated user must be authorized to perform this action."
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "(OK) {\n  \"success\": true,\n  \"message\": \"Book deleted successfully\"\n}"
        403:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "(Forbidden) {\n  \"success\": false,\n  \"message\": \"Unauthorized action\",\n  \"errors\": {\n    \"authorization\": \"This action is unauthorized.\"\n  }\n}"
        404:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "(Not Found) {\n  \"success\": false,\n  \"message\": \"Book not found\",\n  \"errors\": {\n    \"book\": \"The book with the specified ID does not exist.\"\n  }\n}"
        500:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "(Internal Server Error) {\n  \"success\": false,\n  \"message\": \"Failed to delete book\",\n  \"errors\": {\n    \"server\": \"An unexpected error occurred.\"\n  }\n}"
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the book to be retrieved.'
        example: 1
        required: true
        schema:
          type: integer
  /api/v1/tokens:
    get:
      summary: ''
      operationId: getApiV1Tokens
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    post:
      summary: ''
      operationId: postApiV1Tokens
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
    delete:
      summary: ''
      operationId: deleteApiV1Tokens
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
  '/api/v1/tokens/{id}':
    delete:
      summary: ''
      operationId: deleteApiV1TokensId
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the token.'
        example: nobis
        required: true
        schema:
          type: string
  /api/v1/users:
    get:
      summary: 'Display a paginated listing of users.'
      operationId: displayAPaginatedListingOfUsers
      description: "This endpoint retrieves a paginated list of users. The response includes user details such as id, name, email, role, and email verification status.\nThe request must be authenticated and authorized."
      parameters:
        -
          in: query
          name: page
          description: 'Optional. The page number for pagination.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Optional. The page number for pagination.'
            example: 1
            nullable: false
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                oneOf:
                  -
                    description: ''
                    type: string
                    example: "(OK) {\n  \"success\": true,\n  \"message\": \"Users retrieved successfully\",\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"John Doe\",\n      \"email\": \"john@example.com\",\n      \"role\": \"admin\",\n      \"email_verified_at\": \"2024-02-19T12:34:56.000000Z\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Jane Smith\",\n      \"email\": \"jane@example.com\",\n      \"role\": \"editor\",\n      \"email_verified_at\": \"2024-02-19T12:35:00.000000Z\"\n    }\n  ],\n  \"meta\": {\n      \"current_page\": 1,\n      \"per_page\": 10,\n      \"total\": 100,\n      \"last_page\": 10\n  }\n}"
                  -
                    description: ''
                    type: string
                    example: "(OK) {\n  \"success\": true,\n  \"message\": \"No users found\",\n  \"data\": [],\n  \"meta\": {\n      \"current_page\": 1,\n      \"per_page\": 10,\n      \"total\": 0,\n      \"last_page\": 0\n  }\n}"
        403:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "(Forbidden) {\n  \"success\": false,\n  \"message\": \"Unauthorized access\",\n  \"errors\": {\n    \"authorization\": [\"Error message describing unauthorized access.\"]\n  }\n}"
        500:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "(Internal Server Error) {\n  \"success\": false,\n  \"message\": \"Failed to retrieve users\",\n  \"errors\": {\n    \"server\": [\"An unexpected error occurred.\"]\n  }\n}"
      tags:
        - Endpoints
      security: []
  '/api/v1/users/{id}/role':
    put:
      summary: 'Update the role of the specified user.'
      operationId: updateTheRoleOfTheSpecifiedUser
      description: "This endpoint updates the role of a user identified by its ID. The authenticated user is not allowed to update their own role.\nThe new role must be one of the following: \"admin\", \"editor\", or \"viewer\"."
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "(OK) {\n  \"success\": true,\n  \"message\": \"Role updated successfully\",\n  \"updated_user\": {\n    \"id\": 3,\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\",\n    \"role\": \"editor\"\n  },\n  \"metadata\": {\n    \"updated_at\": \"2024-02-19T13:00:00.000000Z\",\n    \"changed_by\": {\n      \"id\": 1,\n      \"name\": \"Admin User\"\n    }\n  }\n}"
        403:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "(Forbidden) {\n  \"success\": false,\n  \"message\": \"Unauthorized action\",\n  \"errors\": {\n    \"authorization\": [\"Tidak boleh mengubah role sendiri\"]\n  }\n}"
        404:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "(Not Found) {\n  \"success\": false,\n  \"message\": \"User not found\",\n  \"errors\": {\n    \"id\": [\"User tidak ditemukan\"]\n  }\n}"
        500:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "(Internal Server Error) {\n  \"success\": false,\n  \"message\": \"Failed to update role\",\n  \"errors\": {\n    \"server\": [\"An unexpected error occurred\"]\n  }\n}"
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  description: 'The new role for the user. Allowed values: admin, editor, viewer.'
                  example: '"editor".'
                  nullable: false
              required:
                - role
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user whose role will be updated.'
        example: 3
        required: true
        schema:
          type: integer
tags:
  -
    name: Endpoints
    description: ''
