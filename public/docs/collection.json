{
    "variable": [
        {
            "id": "baseUrl",
            "key": "baseUrl",
            "type": "string",
            "name": "string",
            "value": "http:\/\/localhost"
        }
    ],
    "info": {
        "name": "Laravel",
        "_postman_id": "8b3cb65b-b74f-469d-8b3f-91fb71e1e90d",
        "description": "",
        "schema": "https:\/\/schema.getpostman.com\/json\/collection\/v2.1.0\/collection.json"
    },
    "item": [
        {
            "name": "Endpoints",
            "description": "",
            "item": [
                {
                    "name": "Register new user.",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "api\/v1\/register",
                            "query": [],
                            "raw": "{{baseUrl}}\/api\/v1\/register"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"name\":\"John Doe\",\"email\":\"john@example.com\",\"password\":\"secret123\",\"password_confirmation\":\"secret123\"}"
                        },
                        "description": "This endpoint registers a new user and sends an email verification notification.",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 201,
                            "body": "{\n  \"message\": \"Registration successful! Please check your email for verification.\",\n  \"data\": {\n    \"user\": {\n      \"id\": 1,\n      \"name\": \"John Doe\",\n      \"email\": \"john@example.com\",\n      \"role\": \"viewer\",\n      \"created_at\": \"2024-02-19T10:00:00.000000Z\",\n      \"updated_at\": \"2024-02-19T10:00:00.000000Z\"\n    }\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 422,
                            "body": "{\n  \"message\": \"The given data was invalid.\",\n  \"errors\": {\n    \"email\": [\n      \"The email has already been taken.\"\n    ]\n  }\n}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "Login user and create API token.",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "api\/v1\/login",
                            "query": [],
                            "raw": "{{baseUrl}}\/api\/v1\/login"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"email\":\"john@example.com\",\"password\":\"secret123\"}"
                        },
                        "description": "This endpoint authenticates a user using their email and password.\nUpon successful authentication and email verification, it returns an API token.",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "{\n  \"message\": \"Login successful\",\n  \"data\": {\n    \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n    \"user\": {\n      \"id\": 1,\n      \"name\": \"John Doe\",\n      \"email\": \"john@example.com\",\n      \"role\": \"viewer\",\n      \"email_verified_at\": \"2024-02-19T10:00:00.000000Z\",\n      \"created_at\": \"2024-02-19T10:00:00.000000Z\",\n      \"updated_at\": \"2024-02-19T10:00:00.000000Z\"\n    }\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 401,
                            "body": "{\n  \"message\": \"Invalid credentials\"\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 403,
                            "body": "{\n  \"message\": \"Email not verified\"\n}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "Send a password reset link to the given email.",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "api\/v1\/forgot-password",
                            "query": [],
                            "raw": "{{baseUrl}}\/api\/v1\/forgot-password"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"email\":\"john@example.com\"}"
                        },
                        "description": "This endpoint sends a password reset link to the provided email address if it exists in the system.\nThe email field is required and must be in a valid email format.",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "{\n  \"message\": \"We have emailed your password reset link!\"\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 400,
                            "body": "{\n  \"message\": \"Unable to send reset link.\"\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 422,
                            "body": "{\n  \"message\": \"The given data was invalid.\",\n  \"errors\": {\n    \"email\": [\n      \"The email field is required.\"\n    ]\n  }\n}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "Reset password using provided token.",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "api\/v1\/reset-password",
                            "query": [],
                            "raw": "{{baseUrl}}\/api\/v1\/reset-password"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"token\":\"\\\"abc123def456\\\"\",\"email\":\"\\\"john@example.com\\\"\",\"password\":\"\\\"newsecret123\\\"\",\"password_confirmation\":\"\\\"newsecret123\\\"\"}"
                        },
                        "description": "This endpoint resets the user's password using the token provided in the password reset email.\nThe request must include a valid reset token, the email associated with the account, and the new password (with confirmation).",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "{\n  \"message\": \"Your password has been reset!\"\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 400,
                            "body": "{\n  \"message\": \"Password reset failed.\"\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 422,
                            "body": "{\n  \"message\": \"The given data was invalid.\",\n  \"errors\": {\n    \"email\": [\n      \"The email field is required.\"\n    ],\n    \"password\": [\n      \"The password must be at least 8 characters.\"\n    ]\n  }\n}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "Verify email using link parameters.",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "api\/v1\/email\/verify\/:id\/:hash",
                            "query": [],
                            "raw": "{{baseUrl}}\/api\/v1\/email\/verify\/:id\/:hash",
                            "variable": [
                                {
                                    "id": "id",
                                    "key": "id",
                                    "value": "1",
                                    "description": "The unique identifier of the user."
                                },
                                {
                                    "id": "hash",
                                    "key": "hash",
                                    "value": "%222b1a7d9e...%22",
                                    "description": "The verification hash generated from the user's email."
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": null,
                        "description": "This endpoint verifies a user's email address when they click the verification link\nthat was sent to them. The link contains two parameters: the user's ID and a verification hash.",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "{\n  \"message\": \"Email successfully verified\"\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 200,
                            "body": "{\n  \"message\": \"Email already verified\"\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 401,
                            "body": "{\n  \"message\": \"Invalid verification link\"\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 404,
                            "body": "{\n  \"message\": \"User not found\"\n}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "Logout user by deleting current access token.",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "api\/v1\/logout",
                            "query": [],
                            "raw": "{{baseUrl}}\/api\/v1\/logout"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {token} required The access token of the authenticated user."
                            },
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": null,
                        "description": "This endpoint logs out the currently authenticated user by revoking their current access token.\nA valid Bearer token in the Authorization header is required.",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "{\n  \"message\": \"Successfully logged out\"\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 401,
                            "body": "{\n  \"message\": \"Unauthenticated\"\n}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "Resend verification email to the authenticated user.",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "api\/v1\/email\/resend",
                            "query": [],
                            "raw": "{{baseUrl}}\/api\/v1\/email\/resend"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {token} required The API token for the authenticated user."
                            },
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": null,
                        "description": "This endpoint resends the email verification link to the currently authenticated user.\nA valid Bearer token in the Authorization header is required.",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "{\n  \"message\": \"Verification link resent\"\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 401,
                            "body": "{\n  \"message\": \"Unauthenticated\"\n}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "Display a paginated listing of books.",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "api\/v1\/books",
                            "query": [
                                {
                                    "key": "search",
                                    "value": "%22Laravel%22",
                                    "description": "Optional. A keyword to filter books by title, author, or description.",
                                    "disabled": false
                                },
                                {
                                    "key": "tahun_terbit",
                                    "value": "2020",
                                    "description": "Optional. Filter books by publication year.",
                                    "disabled": false
                                },
                                {
                                    "key": "order",
                                    "value": "et",
                                    "description": "Optional. The sort order for the book title. Allowed values: \"asc\", \"desc\". Default: \"asc\"",
                                    "disabled": false
                                },
                                {
                                    "key": "per_page",
                                    "value": "6",
                                    "description": "Optional. The number of items per page. Must be an integer >= 1. Default: 10",
                                    "disabled": false
                                }
                            ],
                            "raw": "{{baseUrl}}\/api\/v1\/books?search=%22Laravel%22&tahun_terbit=2020&order=et&per_page=6"
                        },
                        "method": "GET",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": null,
                        "description": "This endpoint retrieves a paginated list of books with optional filtering and sorting.\nYou can filter the books by a search keyword (applied to title, author, or description)\nand by publication year (tahun_terbit). You can also specify the sort order and number of items per page.",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "{\n  \"success\": true,\n  \"message\": \"Books retrieved successfully\",\n  \"data\": [\n    {\n      \"id\": 1,\n      \"judul\": \"Laravel Basics\",\n      \"penulis\": \"Jane Doe\",\n      \"tahun_terbit\": 2020,\n      \"deskripsi\": \"An introduction to Laravel.\",\n      \"created_at\": \"2024-02-19T10:00:00.000000Z\",\n      \"updated_at\": \"2024-02-19T10:00:00.000000Z\"\n    }\n  ],\n  \"meta\": {\n    \"current_page\": 1,\n    \"per_page\": 10,\n    \"total\": 100,\n    \"last_page\": 10\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 200,
                            "body": "{\n  \"success\": true,\n  \"message\": \"No books found\",\n  \"data\": [],\n  \"meta\": {\n    \"current_page\": 1,\n    \"per_page\": 10,\n    \"total\": 0,\n    \"last_page\": 0\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 422,
                            "body": "{\n  \"success\": false,\n  \"message\": \"Validation error\",\n  \"errors\": {\n    \"per_page\": [\n      \"The per_page must be at least 1.\"\n    ]\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 500,
                            "body": "{\n  \"success\": false,\n  \"message\": \"Failed to retrieve books\",\n  \"errors\": {\n    \"server\": \"An unexpected error occurred.\"\n  }\n}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "Create a new book record.",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "api\/v1\/books",
                            "query": [],
                            "raw": "{{baseUrl}}\/api\/v1\/books"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {token} required The access token of the authenticated user."
                            },
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"judul\":\"\\\"Laravel Essentials\\\"\",\"penulis\":\"\\\"John Doe\\\"\",\"tahun_terbit\":2023,\"deskripsi\":\"\\\"An introductory guide to Laravel.\\\"\"}"
                        },
                        "description": "This endpoint creates a new book after validating the input and checking user authorization.",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 201,
                            "body": "{\n  \"success\": true,\n  \"message\": \"Book added successfully\",\n  \"data\": {\n    \"id\": 1,\n    \"judul\": \"Laravel Essentials\",\n    \"penulis\": \"John Doe\",\n    \"tahun_terbit\": 2023,\n    \"deskripsi\": \"An introductory guide to Laravel.\",\n    \"created_at\": \"2024-02-19T12:34:56.000000Z\",\n    \"updated_at\": \"2024-02-19T12:34:56.000000Z\"\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 403,
                            "body": "{\n  \"success\": false,\n  \"message\": \"Unauthorized action\",\n  \"errors\": {\n    \"authorization\": [\"This action is unauthorized.\"]\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 422,
                            "body": "{\n  \"success\": false,\n  \"message\": \"Validation error\",\n  \"errors\": {\n    \"judul\": [\"The judul field is required.\"]\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 500,
                            "body": "{\n  \"success\": false,\n  \"message\": \"Failed to create book\",\n  \"errors\": {\n    \"server\": [\"An unexpected error occurred.\"]\n  }\n}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "Display the specified book.",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "api\/v1\/books\/:id",
                            "query": [],
                            "raw": "{{baseUrl}}\/api\/v1\/books\/:id",
                            "variable": [
                                {
                                    "id": "id",
                                    "key": "id",
                                    "value": "1",
                                    "description": "The ID of the book to be retrieved."
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": null,
                        "description": "This endpoint retrieves the details of a specific book identified by its ID.\nIt returns a detailed error message if the book is not found or if the user is unauthorized.",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "{\n  \"success\": true,\n  \"message\": \"Book details retrieved successfully\",\n  \"data\": {\n    \"id\": 1,\n    \"judul\": \"Laravel Essentials\",\n    \"penulis\": \"John Doe\",\n    \"tahun_terbit\": 2023,\n    \"deskripsi\": \"An introductory guide to Laravel.\",\n    \"created_at\": \"2024-02-19T12:34:56.000000Z\",\n    \"updated_at\": \"2024-02-19T12:34:56.000000Z\"\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 404,
                            "body": "{\n  \"success\": false,\n  \"message\": \"Book not found\",\n  \"errors\": {\n    \"book\": \"The book with the specified ID does not exist.\"\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 500,
                            "body": "{\n  \"success\": false,\n  \"message\": \"An unexpected error occurred.\",\n  \"errors\": {\n    \"server\": \"Something went wrong. Please try again later.\"\n  }\n}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "Update the specified book record.",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "api\/v1\/books\/:id",
                            "query": [],
                            "raw": "{{baseUrl}}\/api\/v1\/books\/:id",
                            "variable": [
                                {
                                    "id": "id",
                                    "key": "id",
                                    "value": "1",
                                    "description": "The ID of the book to be updated."
                                }
                            ]
                        },
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {token} required The access token of the authenticated user."
                            },
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"judul\":\"\\\"Laravel Advanced Concepts\\\".\",\"penulis\":\"\\\"Jane Doe\\\".\",\"tahun_terbit\":2023,\"deskripsi\":\"\\\"An advanced guide to Laravel.\\\"\"}"
                        },
                        "description": "This endpoint updates the details of a book identified by its ID.\nAll fields are optional; only the provided fields will be updated.\nThe authenticated user must be authorized to perform this action.",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "(OK) {\n  \"success\": true,\n  \"message\": \"Book updated successfully\",\n  \"data\": {\n    \"id\": 1,\n    \"judul\": \"Laravel Advanced Concepts\",\n    \"penulis\": \"Jane Doe\",\n    \"tahun_terbit\": 2023,\n    \"deskripsi\": \"An advanced guide to Laravel.\",\n    \"created_at\": \"2024-02-19T12:34:56.000000Z\",\n    \"updated_at\": \"2024-02-19T13:00:00.000000Z\"\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 403,
                            "body": "(Forbidden) {\n  \"success\": false,\n  \"message\": \"Unauthorized action\",\n  \"errors\": {\n    \"authorization\": \"This action is unauthorized.\"\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 404,
                            "body": "(Not Found) {\n  \"success\": false,\n  \"message\": \"Book not found\",\n  \"errors\": {\n    \"book\": \"The book with the specified ID does not exist.\"\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 422,
                            "body": "(Unprocessable Entity) {\n  \"success\": false,\n  \"message\": \"Validation error\",\n  \"errors\": {\n    \"judul\": [\n      \"The judul field must be a string.\"\n    ],\n    \"tahun_terbit\": [\n      \"The tahun_terbit must be at least 1900.\"\n    ]\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 500,
                            "body": "(Internal Server Error) {\n  \"success\": false,\n  \"message\": \"Failed to update book\",\n  \"errors\": {\n    \"server\": \"An unexpected error occurred.\"\n  }\n}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "Remove the specified book from storage.",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "api\/v1\/books\/:id",
                            "query": [],
                            "raw": "{{baseUrl}}\/api\/v1\/books\/:id",
                            "variable": [
                                {
                                    "id": "id",
                                    "key": "id",
                                    "value": "1",
                                    "description": "The ID of the book to be deleted."
                                }
                            ]
                        },
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {token} required The access token of the authenticated user."
                            },
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": null,
                        "description": "This endpoint deletes a book identified by its ID.\nThe authenticated user must be authorized to perform this action.",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "(OK) {\n  \"success\": true,\n  \"message\": \"Book deleted successfully\"\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 403,
                            "body": "(Forbidden) {\n  \"success\": false,\n  \"message\": \"Unauthorized action\",\n  \"errors\": {\n    \"authorization\": \"This action is unauthorized.\"\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 404,
                            "body": "(Not Found) {\n  \"success\": false,\n  \"message\": \"Book not found\",\n  \"errors\": {\n    \"book\": \"The book with the specified ID does not exist.\"\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 500,
                            "body": "(Internal Server Error) {\n  \"success\": false,\n  \"message\": \"Failed to delete book\",\n  \"errors\": {\n    \"server\": \"An unexpected error occurred.\"\n  }\n}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "GET api\/v1\/tokens",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "api\/v1\/tokens",
                            "query": [],
                            "raw": "{{baseUrl}}\/api\/v1\/tokens"
                        },
                        "method": "GET",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": null,
                        "description": "",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "header": [
                                {
                                    "key": "cache-control",
                                    "value": "no-cache, private"
                                },
                                {
                                    "key": "content-type",
                                    "value": "application\/json"
                                },
                                {
                                    "key": "access-control-allow-origin",
                                    "value": "*"
                                }
                            ],
                            "code": 401,
                            "body": "{\"message\":\"Unauthenticated.\"}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "POST api\/v1\/tokens",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "api\/v1\/tokens",
                            "query": [],
                            "raw": "{{baseUrl}}\/api\/v1\/tokens"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": null,
                        "description": "",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": []
                },
                {
                    "name": "DELETE api\/v1\/tokens\/{id}",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "api\/v1\/tokens\/:id",
                            "query": [],
                            "raw": "{{baseUrl}}\/api\/v1\/tokens\/:id",
                            "variable": [
                                {
                                    "id": "id",
                                    "key": "id",
                                    "value": "nobis",
                                    "description": "The ID of the token."
                                }
                            ]
                        },
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": null,
                        "description": "",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": []
                },
                {
                    "name": "DELETE api\/v1\/tokens",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "api\/v1\/tokens",
                            "query": [],
                            "raw": "{{baseUrl}}\/api\/v1\/tokens"
                        },
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": null,
                        "description": "",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": []
                },
                {
                    "name": "Display a paginated listing of users.",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "api\/v1\/users",
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "Optional. The page number for pagination.",
                                    "disabled": false
                                }
                            ],
                            "raw": "{{baseUrl}}\/api\/v1\/users?page=1"
                        },
                        "method": "GET",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": null,
                        "description": "This endpoint retrieves a paginated list of users. The response includes user details such as id, name, email, role, and email verification status.\nThe request must be authenticated and authorized.",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "(OK) {\n  \"success\": true,\n  \"message\": \"Users retrieved successfully\",\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"John Doe\",\n      \"email\": \"john@example.com\",\n      \"role\": \"admin\",\n      \"email_verified_at\": \"2024-02-19T12:34:56.000000Z\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Jane Smith\",\n      \"email\": \"jane@example.com\",\n      \"role\": \"editor\",\n      \"email_verified_at\": \"2024-02-19T12:35:00.000000Z\"\n    }\n  ],\n  \"meta\": {\n      \"current_page\": 1,\n      \"per_page\": 10,\n      \"total\": 100,\n      \"last_page\": 10\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 200,
                            "body": "(OK) {\n  \"success\": true,\n  \"message\": \"No users found\",\n  \"data\": [],\n  \"meta\": {\n      \"current_page\": 1,\n      \"per_page\": 10,\n      \"total\": 0,\n      \"last_page\": 0\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 403,
                            "body": "(Forbidden) {\n  \"success\": false,\n  \"message\": \"Unauthorized access\",\n  \"errors\": {\n    \"authorization\": [\"Error message describing unauthorized access.\"]\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 500,
                            "body": "(Internal Server Error) {\n  \"success\": false,\n  \"message\": \"Failed to retrieve users\",\n  \"errors\": {\n    \"server\": [\"An unexpected error occurred.\"]\n  }\n}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "Update the role of the specified user.",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "api\/v1\/users\/:id\/role",
                            "query": [],
                            "raw": "{{baseUrl}}\/api\/v1\/users\/:id\/role",
                            "variable": [
                                {
                                    "id": "id",
                                    "key": "id",
                                    "value": "3",
                                    "description": "The ID of the user whose role will be updated."
                                }
                            ]
                        },
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"role\":\"\\\"editor\\\".\"}"
                        },
                        "description": "This endpoint updates the role of a user identified by its ID. The authenticated user is not allowed to update their own role.\nThe new role must be one of the following: \"admin\", \"editor\", or \"viewer\".",
                        "auth": {
                            "type": "noauth"
                        }
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "(OK) {\n  \"success\": true,\n  \"message\": \"Role updated successfully\",\n  \"updated_user\": {\n    \"id\": 3,\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\",\n    \"role\": \"editor\"\n  },\n  \"metadata\": {\n    \"updated_at\": \"2024-02-19T13:00:00.000000Z\",\n    \"changed_by\": {\n      \"id\": 1,\n      \"name\": \"Admin User\"\n    }\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 403,
                            "body": "(Forbidden) {\n  \"success\": false,\n  \"message\": \"Unauthorized action\",\n  \"errors\": {\n    \"authorization\": [\"Tidak boleh mengubah role sendiri\"]\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 404,
                            "body": "(Not Found) {\n  \"success\": false,\n  \"message\": \"User not found\",\n  \"errors\": {\n    \"id\": [\"User tidak ditemukan\"]\n  }\n}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 500,
                            "body": "(Internal Server Error) {\n  \"success\": false,\n  \"message\": \"Failed to update role\",\n  \"errors\": {\n    \"server\": [\"An unexpected error occurred\"]\n  }\n}",
                            "name": ""
                        }
                    ]
                }
            ]
        }
    ],
    "auth": {
        "type": "noauth"
    }
}